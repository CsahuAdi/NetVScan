from typing import Dict

# Define risk levels & notes for common services
RISK_MAP = {
    'FTP': {
        'risk': 'High',
        'notes': 'FTP transmits data in cleartext; check for anonymous access or enforce FTPS.'
    },
    'SSH': {
        'risk': 'Medium',
        'notes': 'Check if password authentication is disabled and keys are used.'
    },
    'Telnet': {
        'risk': 'High',
        'notes': 'Telnet is insecure; use SSH instead.'
    },
    'HTTP': {
        'risk': 'Medium',
        'notes': 'HTTP is unencrypted; use HTTPS.'
    },
    'HTTPS': {
        'risk': 'Low',
        'notes': 'If properly configured with strong ciphers, risk is low.'
    },
    'MySQL': {
        'risk': 'Medium',
        'notes': 'Check for weak database credentials and unnecessary exposure.'
    },
    'Unknown': {
        'risk': 'High',
        'notes': 'Unknown service; further investigation required.'
    }
}

def assess_vulnerabilities(enriched_services: Dict[int, Dict[str, str]]) -> Dict[int, Dict[str, str]]:
    """
    Takes detected services & banners and assigns risk levels and notes.
    Returns enriched dict:
    {
        port: {
            'service': str,
            'banner': str,
            'risk': str,
            'notes': str
        }
    }
    """
    assessed = {}

    for port, info in enriched_services.items():
        service = info.get('service', 'Unknown')
        banner = info.get('banner', '').lower()
        risk_info = RISK_MAP.get(service, RISK_MAP['Unknown'])

        # start with defaults
        risk = risk_info['risk']
        notes = risk_info['notes']

        # Adjust risk & notes based on banner hints (basic mitigation detection)
        if service == 'FTP' and 'auth tls' in banner:
            risk = 'Medium'
            notes += ' Banner suggests TLS supported.'
        if service == 'SSH' and ('openssh_8' in banner or 'openssh_9' in banner):
            risk = 'Low'
            notes += ' Recent OpenSSH version detected.'
        if service == 'HTTP' and 'apache/2.4' in banner:
            notes += ' Up-to-date Apache detected; verify HTTPS enforced.'

        assessed[port] = {
            'service': service,
            'banner': info.get('banner', ''),
            'risk': risk,
            'notes': notes + ' Needs verification.'
        }

    return assessed

# Example usage
if __name__ == "__main__":
    # Simulated input from service_detector.py
    enriched_services = {
        22: {'service': 'SSH', 'banner': 'SSH-2.0-OpenSSH_8.2'},
        21: {'service': 'FTP', 'banner': '220-FileZilla Server ready'},
        8000: {'service': 'HTTP', 'banner': ''}
    }

    results = assess_vulnerabilities(enriched_services)

    for port, info in results.items():
        print(f"Port {port}: {info['service']} | Risk: {info['risk']} | Notes: {info['notes']}")
